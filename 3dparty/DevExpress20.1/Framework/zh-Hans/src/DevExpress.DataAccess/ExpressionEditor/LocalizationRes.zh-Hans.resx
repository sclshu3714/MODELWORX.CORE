<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--***************************************************************************
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//*****************************************************************************
-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"></xsd:import>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="name" type="xsd:string"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExpressionEditorStringId.Constant_True" xml:space="preserve">
    <value>表示布尔值为真</value>
  </data>
  <data name="ExpressionEditorStringId.Constant_False" xml:space="preserve">
    <value>表示布尔值为假(False)。</value>
  </data>
  <data name="ExpressionEditorStringId.Constant_Null" xml:space="preserve">
    <value>表示一个空引用，它不涉及任何对象。
    </value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Plus" xml:space="preserve">
    <value>执行数值表达式的加法操作,或者连接两个字符串.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Minus" xml:space="preserve">
    <value>计算两个数的差。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Multiply" xml:space="preserve">
    <value>将两个表达式值相乘。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Divide" xml:space="preserve">
    <value>第一个操作数除以第二个操作数</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Modulo" xml:space="preserve">
    <value>取余运算，返回两表达式值相除后的余数.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_BitwiseOr" xml:space="preserve">
    <value>将参与运算的两数各对应的二进位相或。只要对应的二个二进位有一个为1时，向应得结果位就为1；否则，结果为0.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_BitwiseAnd" xml:space="preserve">
    <value>执行两个整数值的按位与操作。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_BitwiseXor" xml:space="preserve">
    <value>执行两个布尔表达式的逻辑或操作，或者执行两个数值表达式之间的按位或操作。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Equal" xml:space="preserve">
    <value>若操作数相等则返回真(true);否则，它返回假(false).</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_NotEqual" xml:space="preserve">
    <value>若操作数不相等则返回真(true)；否则，返回假(false).</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Less" xml:space="preserve">
    <value>小于号。用于比较表达式值。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_LessOrEqual" xml:space="preserve">
    <value>小于等于号。用于比较表达式值。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_GreaterOrEqual" xml:space="preserve">
    <value>大于等于号。用于比较表达式。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Greater" xml:space="preserve">
    <value>大于号。用于比较表达式。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_In" xml:space="preserve">
    <value>In (,,,)
测试结果是否存在对象属性</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Like" xml:space="preserve">
    <value>将一个字符串跟一个模板匹配。若字符串的值与模板相匹配，则结果为真。若字符串不与模板匹配，结果为假。若字符串和模板均未空字符串，则结果为真。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Between" xml:space="preserve">
    <value>Between (,)
在指定范围测试，如果大于等于第一个数并且小于等于第2个数返回True。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_And" xml:space="preserve">
    <value>执行两个表达式的逻辑与操作。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Or" xml:space="preserve">
    <value>执行两个表达式的逻辑或操作。</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Not" xml:space="preserve">
    <value>执行逻辑非运算。</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Max" xml:space="preserve">
    <value>Max(值1, 值2)返回指定值的最大值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Min" xml:space="preserve">
    <value>Min(值1, 值2)
返回指定值的最小值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Abs" xml:space="preserve">
    <value>Abs(值)
返回给定值的绝对值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Acos" xml:space="preserve">
    <value>Acos(值)
返回给定值的反余弦函数值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Asin" xml:space="preserve">
    <value>Asin(值)
返回当前值的反正弦函数值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Atn" xml:space="preserve">
    <value>Atn(值)
返回当前值的反正切函数值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Atn2" xml:space="preserve">
    <value>Atn2(值1, 值2)
返回反正切函数值为两个值的商的角度值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_BigMul" xml:space="preserve">
    <value>BigMul(值1, 值2)
返回一个包含两个32-bit 数的Int64数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Ceiling" xml:space="preserve">
    <value>Ceiling(值)返回大于或等于给定值的整数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Cos" xml:space="preserve">
    <value>Cos(值)返回当前值的余弦函数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sin" xml:space="preserve">
    <value>Sin(值)返回值的正弦值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Tan" xml:space="preserve">
    <value>Tan(值)
返回正切值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Cosh" xml:space="preserve">
    <value>Cosh(值)返回当前值的双曲余弦值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sinh" xml:space="preserve">
    <value>Sinh(值)
返回值的双曲正弦值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Tanh" xml:space="preserve">
    <value>Tanh(值)返回双曲正切值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Exp" xml:space="preserve">
    <value>Exp(值)
根据浮点数表达式返回指定值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sqr" xml:space="preserve">
    <value>Sqr(Value)
返回给定数值开平方后的值。</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Floor" xml:space="preserve">
    <value>Floor(值)
返回小于给定值的最大整数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sign" xml:space="preserve">
    <value>Sign(Value)
返回给定Value值的符号。若Value为正数或0，则返回1，否则返回-1.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Round" xml:space="preserve">
    <value>Round(值)返回最接近给定值的整数值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Round_2" xml:space="preserve">
    <value>Round(值, 有效位数)
返回最接近给定值的整数值，或精确到小数点指定位数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Log" xml:space="preserve">
    <value>Log(值)
返回值的自然对数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Log_2" xml:space="preserve">
    <value>Log(值, 基数)返回值的指定基数的对数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Log10" xml:space="preserve">
    <value>Log10(值)
返回值基于10的对数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Power" xml:space="preserve">
    <value>Power(值, 幂)
返回值的指定幂数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Rnd" xml:space="preserve">
    <value>Rnd()
返回一个大于等0并小于1的随机数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToInt" xml:space="preserve">
    <value>ToInt(Value)
将值转换为整型</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToLong" xml:space="preserve">
    <value>ToLong(Value)
转换只为Long型</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToFloat" xml:space="preserve">
    <value>ToFloat(Value)
转换为等效的32位单精度浮点数的值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToDouble" xml:space="preserve">
    <value>ToDouble(Value)
将值转换为Double型</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToDecimal" xml:space="preserve">
    <value>ToDecimal(Value)将值转换为等效的十进制数。</value>
  </data>
  <data name="ExpressionEditorStringId.Function_StartsWith" xml:space="preserve">
    <value>StartsWith(字符串, 开始字符)如果字符串以开始字符开头，则返回True，否则返回False</value>
  </data>
  <data name="ExpressionEditorStringId.Function_EndsWith" xml:space="preserve">
    <value>EndsWith(字符串,结束字符串)
如果字符串以指定的结束字符串结尾则返回True，否则返回False</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Contains" xml:space="preserve">
    <value>Contains(字符串, 子字符串)
如果字符串包含子字符串则返回True，否则返回False</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Trim" xml:space="preserve">
    <value>Trim(字符串)
移除字符串起始和结尾空白</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Len" xml:space="preserve">
    <value>Len(值)
返回当前值的长度</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Upper" xml:space="preserve">
    <value>Upper(字符串)
将字符串转换为大写.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Lower" xml:space="preserve">
    <value>Lower(字符串)
返回字符串的小写字符串</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Concat" xml:space="preserve">
    <value>Concat(字符串1, ... , 字符串N)
返回由字符串1到字符串N链接后的字符串</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Ascii" xml:space="preserve">
    <value>Ascii(字符串)
返回当前字符串的Ascii码</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Reverse" xml:space="preserve">
    <value>Reverse(字符串)反转字符串</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToStr" xml:space="preserve">
    <value>ToStr(值)将值转换为字符类型</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Char" xml:space="preserve">
    <value>Char(数值)
将指定的Ascii码数值转换为字符</value>
  </data>
  <data name="ExpressionEditorStringId.Function_CharIndex" xml:space="preserve">
    <value>CharIndex(字符串1, 字符串2)
返回字符串2在字符串1中的起始位置</value>
  </data>
  <data name="ExpressionEditorStringId.Function_CharIndex_3" xml:space="preserve">
    <value>CharIndex(字符串1, 字符串2, 开始位置)
返回字符串2在字符串1中的其实位置，开始位置从用户指定的开始位置算起</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadLeft" xml:space="preserve">
    <value>PadLeft(字符串, 长度)
左对齐字符串，填充指定长度的空白字符</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadRight" xml:space="preserve">
    <value>PadRight(字符串, 长度)
右对齐字符串，填充指定长度的空白字符</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadLeft_3" xml:space="preserve">
    <value>PadLeft(字符串, 长度, 字符)
左对齐字符串，并填充指定长度的设置字符</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadRight_3" xml:space="preserve">
    <value>PadRightPadLeft(字符串, 长度, 字符)
右对齐字符串，并填充指定长度的设置字符</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Remove_3" xml:space="preserve">
    <value>Remove(字符串, 起始位置, 长度)从字符串中指定位置开始删除指定长度的字符</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Replace" xml:space="preserve">
    <value>Replace(字符串, 子字符串2, 字符串3)返回字符串中子字符串2被字符串3替换的字符串</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Insert" xml:space="preserve">
    <value>Insert(字符串1, 开始位置, 字符串2)
从设定的起始位置开始在字符串1中插入字符串2</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Substring" xml:space="preserve">
    <value>Substring(字符串, 起始位置)
返回从起始位置截取指定字符串的字符串</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Substring_3" xml:space="preserve">
    <value>Substring(字符串,起始位置, 长度)
返回从指定字符串的指定起始位置开始截取指定长度的字符串</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Iif" xml:space="preserve">
    <value>Iif(表达式, 真, 假)根据表达式要么返回真，要么返回假</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsNull" xml:space="preserve">
    <value>IsNull(值)如果值为空，则返回True</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsNullOrEmpty" xml:space="preserve">
    <value>IsNullOrEmpty(字符串)如果字符串为空或无字符串，则返回True，否则返回False</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsThisWeek" xml:space="preserve">
    <value>IsThisWeek(DateTime)如果当前日期在当前周 返回True</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsThisMonth" xml:space="preserve">
    <value>IsThisMonth(DateTime)如果当前日期在当前月份 返回True</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsThisYear" xml:space="preserve">
    <value>IsThisYear(DateTime)如果当前日期在当前年内 返回True</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeDayAfterTomorrow" xml:space="preserve">
    <value>LocalDateTimeDayAfterTomorrow()返回当前对应值的后台</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeLastWeek" xml:space="preserve">
    <value>LocalDateTimeLastWeek()返回当前值的上一周的第一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNextMonth" xml:space="preserve">
    <value>LocalDateTimeNextMonth()返回当前对应值的下个月的第一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNextWeek" xml:space="preserve">
    <value>LocalDateTimeNextWeek()返回当前日期对于的下一周的第一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNextYear" xml:space="preserve">
    <value>LocalDateTimeNextYear()获取当前日期下一年的第一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNow" xml:space="preserve">
    <value>LocalDateTimeNow()返回当前日期对应的日期值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeThisMonth" xml:space="preserve">
    <value>LocalDateTimeThisMonth()获取当前日期所在月份的第一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeThisWeek" xml:space="preserve">
    <value>LocalDateTimeThisWeek()返回当前日期对应周的第一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeThisYear" xml:space="preserve">
    <value>LocalDateTimeThisYear()获取当前日期年份的第一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeToday" xml:space="preserve">
    <value>LocalDateTimeToday()返回今天对应的日期值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeTomorrow" xml:space="preserve">
    <value>LocalDateTimeTomorrow()获取当前值的下一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeTwoWeeksAway" xml:space="preserve">
    <value>LocalDateTimeTwoWeeksAway()获取当前日期下一周的第一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeYesterday" xml:space="preserve">
    <value>LocalDateTimeYesterday()获取到当前日期的前一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddTicks" xml:space="preserve">
    <value>AddTicks(日期时间, 时间的计时周期数)
返回从日期时间到用户设置的计时周期数后的时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddMilliSeconds" xml:space="preserve">
    <value>AddMilliSeconds(日期时间, 毫秒数)
返回从日期时间经过用户设定的毫秒数后的时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddSeconds" xml:space="preserve">
    <value>AddSeconds(日期时间, 秒数)
返回从日期时间经过用户设置的秒数后的时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddMinutes" xml:space="preserve">
    <value>AddMinutes(日期时间,分钟数)
返回从日期时间经过用户设置的分钟数后的时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddHours" xml:space="preserve">
    <value>AddHours(日期时间, 小时数)
返回从日期时间经过用户设定小时数后的时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddDays" xml:space="preserve">
    <value>AddDays(日期时间, 天数)
返回从日期时间经过用户设定天数后的时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddMonths" xml:space="preserve">
    <value>AddMonths(日期时间, 月数)
返回从日期时间经过用户设置的月数后的时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddYears" xml:space="preserve">
    <value>AddYears(日期时间, 年数)
返回从日期时间经过用户设置的年数后的时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddTimeSpan" xml:space="preserve">
    <value>AddTimeSpan(日期时间, 时间间隔)
返回从日期时间经过用户设置的时间间隔后的时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffDay" xml:space="preserve">
    <value>DateDiffDay(开始日期, 结束日期)
返回开始日期到结束日期的临界天数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffHour" xml:space="preserve">
    <value>DateDiffHour(开始日期, 结束日期)
返回开始日期到结束日期的临界小时数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffMilliSecond" xml:space="preserve">
    <value>DateDiffMilliSecond(开始日期, 结束日期)
返回开始日期到结束日期的临界毫秒数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffMinute" xml:space="preserve">
    <value>DateDiffMinute(开始日期, 结束日期)
返回开始日期到结束日期的临界分钟数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffMonth" xml:space="preserve">
    <value>DateDiffMonth(开始日期, 结束日期)
返回开始日期到结束日期的临界月数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffSecond" xml:space="preserve">
    <value>DateDiffSecond(开始日期, 结束日期)
返回开始日期到结束日期的临界秒数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffTick" xml:space="preserve">
    <value>DateDiffTick(开始日期, 结束日期)
返回开始日期到结束日期的临界计时周期数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffYear" xml:space="preserve">
    <value>DateDiffYear(开始日期, 结束日期)
返回开始日期到结束日期的临界时间间隔数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDate" xml:space="preserve">
    <value>GetDate(日期时间)
获取设置日期时间的日期</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDay" xml:space="preserve">
    <value>GetDay(日期时间)
获取设置日期时间的天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDayOfWeek" xml:space="preserve">
    <value>GetDayOfWeek(日期时间)获取设置日期为一周的某一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDayOfYear" xml:space="preserve">
    <value>GetDayOfYear(日期时间)
获取设置日期为一年的某一天</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetMilliSecond" xml:space="preserve">
    <value>GetMilliSecond(日期时间)
获取日期设置的毫秒数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetMinute" xml:space="preserve">
    <value>GetMinute(日期时间)
获取设置日期的分钟数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetMonth" xml:space="preserve">
    <value>GetMonth(日期时间)
获取设置日期的月份</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetSecond" xml:space="preserve">
    <value>GetSecond(日期时间)
获取设置日期的月份秒数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetTimeOfDay" xml:space="preserve">
    <value>GetTimeOfDay(日期时间)
获取设置日期为一天的某个时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetYear" xml:space="preserve">
    <value>GetYear(日期时间)
获取设置日期的年数</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetHour" xml:space="preserve">
    <value>GetHour(日期时间)
获取日期设置的小时</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Now" xml:space="preserve">
    <value>Now()
返回当前系统的日期和时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Today" xml:space="preserve">
    <value>Today()
返回当前时间</value>
  </data>
  <data name="ExpressionEditorStringId.Function_UtcNow" xml:space="preserve">
    <value>UtcNow()返回当前系统日期和时间，作为协调通用时间 (UTC) 表示。</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AvgAggregate" xml:space="preserve">
    <value>Avg(Value)返回集合的平均值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_CountAggregate" xml:space="preserve">
    <value>Count()返回一个集合中对象的数量</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ExistsAggregate" xml:space="preserve">
    <value>Exists()确定对象是否存在于集合中。</value>
  </data>
  <data name="ExpressionEditorStringId.Function_MaxAggregate" xml:space="preserve">
    <value>Max(值)返回集合中的最大值</value>
  </data>
  <data name="ExpressionEditorStringId.Function_MinAggregate" xml:space="preserve">
    <value>Min(Value)返回集合中的最小表达式</value>
  </data>
  <data name="ExpressionEditorStringId.Function_SumAggregate" xml:space="preserve">
    <value>Sum(值)返回集合中所有表达式的值的总和</value>
  </data>
  <data name="ExpressionEditorStringId.Function_SingleAggregate" xml:space="preserve">
    <value>Single()返回集合中的单一值</value>
  </data>
</root>